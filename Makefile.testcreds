# This should be included from the main Makefile, ie. not used directly

TESTCREDS_OUT := $(TOP)/_testcreds
TESTCREDS_DONE :=
COMMA := ,

define add_CA
$(eval name := $(strip $1))
$(eval TESTCREDS_CA_$(name) := $(TESTCREDS_OUT)/ca_$(name))
$(eval TESTCREDS_CA_$(name)_PRIVATE := $(TESTCREDS_OUT)/ca_$(name)_private)
$(eval TESTCREDS_DONE += $(TESTCREDS_CA_$(name))/CA.cert)
$(eval TESTCREDS_CHILDREN += $(TESTCREDS_CA_$(name)))
$(eval TESTCREDS_CHILDREN += $(TESTCREDS_CA_$(name)_PRIVATE))
$(TESTCREDS_CA_$(name)_PRIVATE)/CA.pem: | $(TESTCREDS_CA_$(name)_PRIVATE)
	$Qcd $(TESTCREDS_CA_$(name)_PRIVATE) && \
		hxtool issue-certificate --self-signed --issue-ca \
		--generate-key=rsa --subject="CN=$(name),DC=hcphacking,DC=xyz" \
		--lifetime=10years --certificate="FILE:CA.pem"
$(TESTCREDS_CA_$(name))/CA.cert: | $(TESTCREDS_CA_$(name))
$(TESTCREDS_CA_$(name))/CA.cert: $(TESTCREDS_CA_$(name)_PRIVATE)/CA.pem
	$$Qopenssl x509 -in $$< -outform PEM -out $$@
endef

define add_cred_hxtool
$(eval CA := $(strip $1))
$(eval name := $(strip $2))
$(eval _file := $(strip $3))
$(eval flags := $(strip $4))
$(eval TESTCREDS_$(name) := $(TESTCREDS_OUT)/$(name))
$(eval TESTCREDS_DONE += $(TESTCREDS_$(name))/$(_file))
$(eval TESTCREDS_CHILDREN += $(TESTCREDS_$(name)))
$(TESTCREDS_$(name))/$(_file): | $(TESTCREDS_$(name))
$(TESTCREDS_$(name))/$(_file): $(TESTCREDS_CA_$(CA)_PRIVATE)/CA.pem
	$$Qcd $(TESTCREDS_$(name)) && \
		hxtool issue-certificate \
		--ca-certificate="FILE:$(TESTCREDS_CA_$(CA)_PRIVATE)/CA.pem" \
		--certificate="FILE:$(_file)" \
		--generate-key=rsa --key-bits=2048 \
		$(flags)
endef

define add_cred_randkey
$(eval name := $(strip $1))
$(eval _file := $(strip $2))
$(eval TESTCREDS_$(name) := $(TESTCREDS_OUT)/$(name))
$(eval TESTCREDS_DONE += $(TESTCREDS_$(name))/$(_file))
$(eval TESTCREDS_CHILDREN += $(TESTCREDS_$(name)))
$(TESTCREDS_$(name))/$(_file): | $(TESTCREDS_$(name))
	$$Qcd $(TESTCREDS_$(name)) && \
		openssl rand -out $(_file) -hex 32
endef

# TODO: this should be unnecessary. Replace the assetsigner/assetverifier pair
# by a certificate-based approach.
define add_cred_keypair
$(eval private := $(strip $1))
$(eval public := $(strip $2))
$(eval TESTCREDS_$(private) := $(TESTCREDS_OUT)/$(private))
$(eval TESTCREDS_$(public) := $(TESTCREDS_OUT)/$(public))
$(eval TESTCREDS_CHILDREN += $(TESTCREDS_$(private)))
$(eval TESTCREDS_CHILDREN += $(TESTCREDS_$(public)))
$(eval TESTCREDS_DONE += $(TESTCREDS_$(public))/key.pem)
$(TESTCREDS_$(private))/key.priv: | $(TESTCREDS_$(private))
	$$Qcd $(TESTCREDS_$(private)) && \
		openssl genrsa -out key.priv
$(TESTCREDS_$(public))/key.pem: | $(TESTCREDS_$(public))
$(TESTCREDS_$(public))/key.pem: $(TESTCREDS_$(private))/key.priv
	$$Qopenssl rsa -pubout -in $$< -out $$@
endef

$(eval $(call add_CA,default))
$(eval $(call add_cred_hxtool,default,enrollsvc,server.pem, \
		--type=https-server \
		--hostname="enrollsvc.hcphacking.xyz" \
		--subject="UID=emgmt$(COMMA)DC=hcphacking$(COMMA)DC=xyz"))
$(eval $(call add_cred_hxtool,default,attestsvc,server.pem, \
		--type=https-server \
		--hostname="attestsvc.hcphacking.xyz" \
		--subject="UID=emgmt$(COMMA)DC=hcphacking$(COMMA)DC=xyz"))

$(eval $(call add_CA,clienthttps))
$(eval $(call add_cred_hxtool,clienthttps,enrollhealthclient,client.pem, \
		--type=https-client \
		--subject="UID=healthclient$(COMMA)DC=hcphacking$(COMMA)DC=xyz" \
		--email="healthclient@hcphacking.xyz"))

$(eval $(call add_CA,enrollsvc))
$(eval $(call add_cred_hxtool,enrollsvc,enrollclient,client.pem, \
		--type=https-client \
		--hostname="orchestrator.hcphacking.xyz" \
		--subject="UID=orchestrator$(COMMA)DC=hcphacking$(COMMA)DC=xyz" \
		--email="orchestrator@hcphacking.xyz"))

$(eval $(call add_CA,kdcsvc))
$(eval $(call add_cred_hxtool,kdcsvc,kdcclient,client.pem, \
		--type=https-client \
		--hostname="attestsvc.hcphacking.xyz" \
		--subject="UID=attestsvc$(COMMA)DC=hcphacking$(COMMA)DC=xyz" \
		--email="attestsvc@hcphacking.xyz"))

$(eval $(call add_cred_randkey,attestnoncer,key))
$(eval $(call add_cred_keypair,assetsigner,assetverifier))

$(TESTCREDS_CHILDREN): | $(TESTCREDS_OUT)
$(TESTCREDS_OUT) $(TESTCREDS_CHILDREN):
	$Qmkdir $@

testcreds: $(TESTCREDS_DONE)
ifneq (,$(wildcard $(TESTCREDS_OUT)))
clean_testcreds:
	$Qrm -rf $(TESTCREDS_OUT)
clean: clean_testcreds
endif
